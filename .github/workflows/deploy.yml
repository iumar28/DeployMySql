name: Deploy to EC2 and Run Docker

on:
  workflow_run:
    workflows: ["Build and Dockerize"]
    types:
      - completed

jobs:
  check-status:
    runs-on: ubuntu-latest
    steps:
      - name: Print message
        run: echo "Workflow received completion status from Build and Dockerize."

  deploy-to-ec2:
    runs-on: ubuntu-latest
    needs: check-status
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      EC2_PUBLIC_KEY: ${{ secrets.EC2_PUBLIC_KEY }}
      EC2_SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    steps:
      # Step 1: Checkout the repository
      - name: Checkout the repository
        uses: actions/checkout@v3

      # Step 2: Check environment variables (optional for debugging purposes)
      - name: Check environment variables
        run: |
          echo "AWS_REGION=${{ secrets.AWS_REGION }}"
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}"
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
          echo "EC2_PUBLIC_KEY=${{ secrets.EC2_PUBLIC_KEY }}"

      # Step 3: SSH into EC2 Instance and Deploy Docker Image
      - name: SSH into EC2 Instance and Deploy Docker Image
        run: |
          # Set up the SSH key and permissions
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/ec2-keypair.pem
          chmod 600 ~/.ssh/ec2-keypair.pem

          # Add EC2 IP to known hosts to avoid prompt
          ssh-keyscan -H 35.175.152.81 >> ~/.ssh/known_hosts

          # SSH into EC2 instance
          ssh -i ~/.ssh/ec2-keypair.pem ubuntu@35.175.152.81 <<EOF
            # Update package list and install prerequisites
            sudo apt-get update
            sudo apt-get install -y \
              ca-certificates \
              curl \
              gnupg \
              lsb-release

            # Add Docker's official GPG key
            sudo mkdir -p /etc/apt/keyrings
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg

            # Set up the Docker repository
            echo \
              "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
              $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

            # Update the package list again
            sudo apt-get update

            # Install Docker Engine, CLI, and Containerd
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io

            # Start and enable Docker service
            sudo systemctl start docker
            sudo systemctl enable docker

            # Add the current user to the Docker group
            sudo usermod -aG docker \$USER

            # Install Docker Compose plugin
            sudo apt-get install -y docker-compose-plugin

            # Pull Docker image from Docker Hub
            docker pull ${{ secrets.DOCKER_USERNAME }}/deploymysql:latest

            # Clone docker-compose repository
            git clone https://github.com/iumar288/DockerCompose || true
            cd DockerCompose/mysql

            # Run Docker Compose to deploy
            docker compose up -d
          EOF
